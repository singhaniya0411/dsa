#include <iostream>
#include <string>

class Node {
public:
    std::string name;
    Node* next;

    Node(const std::string& newName) : name(newName), next(nullptr) {}
};

class LinkedList {
private:
    Node* head;

public:
    LinkedList() : head(nullptr) {}

    ~LinkedList() {
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void insertInOrder(const std::string& newName) {
        Node* newNode = new Node(newName);

        if (head == nullptr || head->name > newName) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr && current->next->name < newName) {
                current = current->next;
            }
            newNode->next = current->next;
            current->next = newNode;
        }

        std::cout << "Inserted: " << newName << " in alphabetical order." << std::endl;
    }

    void displayList() const {
        Node* current = head;
        std::cout << "Linked List (in order): ";
        while (current != nullptr) {
            std::cout << current->name << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    LinkedList nameList;

    nameList.insertInOrder("Charlie");
    nameList.insertInOrder("Alice");
    nameList.insertInOrder("Bob");
    nameList.insertInOrder("David");

    nameList.displayList();

    return 0;
}
