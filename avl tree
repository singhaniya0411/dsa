#include <iostream>
#include <algorithm>
using namespace std;
class AVL {
public:
    int data;
    AVL* left;
    AVL* right;
    int height;

    AVL(int value){
        data=value;
        left=0;
        right=0;
        height=1;
    } 
};

class AVLTree {
private:
    AVL* root;

    int getheight(AVL* node) {
        if (node == 0)
            return 0;
        return node->height;
    }

    int newheight(AVL* node) {
        if (node != 0) {
            node->height = 1 + max(getheight(node->left), getheight(node->right));
            return node->height;
        }
        return 0;
    }

    AVL* rightRotate(AVL* y) {
        AVL* x = y->left;
        AVL* T2 = x->right;

        x->right = y;
        y->left = T2;

        newheight(y);
        newheight(x);

        return x;
    }

    AVL* leftRotate(AVL* x) {
        AVL* y = x->right;
        AVL* T2 = y->left;

        y->left = x;
        x->right = T2;

        newheight(x);
        newheight(y);

        return y;
    }

    int getBalanceFactor(AVL* node) {
        if (node == 0)
            return 0;
        return getheight(node->left) - getheight(node->right);
    }

    AVL* balance(AVL* node, int value) {
        newheight(node);

        int balanceFactor = getBalanceFactor(node);

        if (balanceFactor > 1 && value < node->left->data)
            return rightRotate(node);

        if (balanceFactor < -1 && value > node->right->data)
            return leftRotate(node);

        if (balanceFactor > 1 && value > node->left->data) {
            node->left = leftRotate(node->left);
            return rightRotate(node);
        }

        if (balanceFactor < -1 && value < node->right->data) {
            node->right = rightRotate(node->right);
            return leftRotate(node);
        }

        return node;
    }

    AVL* insert(AVL* node, int value) {
        if (node == 0)
            return new AVL(value);

        if (value < node->data)
            node->left = insert(node->left, value);
        else if (value > node->data)
            node->right = insert(node->right, value);
        else
            return node;

        return balance(node, value);
    }

    void preorderPrint(AVL* node) {
        if (node != 0) {
            cout << node->data << " ";
            preorderPrint(node->left);
            preorderPrint(node->right);
        }
    }

    bool search(AVL* node, int value) {
        if (node == 0)
            return false;

        if (value < node->data)
            return search(node->left, value);
        else if (value > node->data)
            return search(node->right, value);
        else
            return true;
    }

public:
    AVLTree(){
        root=0;
    }

    void insert(int value) {
        root = insert(root, value);
    }

    void preorderPrint() {
        preorderPrint(root);
        cout << endl;
    }

    bool search(int value) {
        return search(root, value);
    }
};

int main() {
    AVLTree T;

    T.insert(10);
    T.insert(20);
    T.insert(30);
    T.insert(15);
    T.insert(5);

    cout << "Preorder traversal: ";
    T.preorderPrint();

    int key = 10;
    if (T.search(key))
        cout << key << " is present in the AVL tree." << endl;
    else
        cout << key << " is not present in the AVL tree." << endl;

    return 0;
}


